datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_CONNECTION")
}

generator client {
  provider = "prisma-client-js"
}

// Cleaned-up Prisma schema

model User {
  id                 Int       @id @default(sequence())
  name               String
  email              String    @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  subscriptionStart  DateTime?
  subscriptionActive Boolean   @default(false)
  stripeAccountId    String? // Added stripeAccountId field for linking to Stripe
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  accounts         Account[]         @relation("UserAccounts")
  sessions         Session[]         @relation("UserSessions")
  userMailServices UserMailService[] @relation("UserMailServices")
  paymentMethods   PaymentMethod[] // New relation to PaymentMethod
}

model PaymentMethod {
  id              Int      @id @default(sequence())
  paymentMethodId String // Stripe payment_method ID
  lastFour        String // Last 4 digits of the card
  brand           String // Card brand (e.g., Visa, Mastercard)
  userId          Int // Foreign key to User
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())

  @@unique([userId, paymentMethodId]) // Ensure no duplicate payment methods for a user
}

model Account {
  id                Int      @id @default(sequence())
  userId            Int
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  expires_at        Int?
  scope             String?
  token_type        String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], name: "UserAccounts", onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(sequence())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], name: "UserSessions", onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([identifier, token])
}

model UserMailService {
  id                        Int      @id @default(sequence())
  userId                    Int
  user                      User     @relation(fields: [userId], references: [id], name: "UserMailServices", onDelete: Cascade)
  document_url              String?
  contact_toReceiverName    String
  contact_ToReceiverAddress String
  contact_ToReceiverCity    String
  contact_ToReceiverState   String
  contact_ToReceiverZipCode String
  contact_FromSenderName    String
  contact_FromSenderAddress String
  Contact_FromSenderCity    String
  contact_FromSenderState   String
  contact_FromSenderZipCode String
  contact_sendDate          DateTime
  Contact_TypeofMail        String
  contact_paperSize         String
  pdfLink                   String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}
